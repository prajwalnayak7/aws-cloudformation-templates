AWSTemplateFormatVersion: '2010-09-09'

Description: Environment with VPC, Subnets, NAT Gateway, and Routes

Parameters:

  VpcCidr:
    Description: CIDR block for the VPC
    Type: String
    Default: '10.0.0.0/16'

  PublicSubnetACidr:
    Description: CIDR block for the public subnet A
    Type: String
    Default: '10.0.1.0/24'

  PublicSubnetBCidr:
    Description: CIDR block for the public subnet B
    Type: String
    Default: '10.0.2.0/24'

  PrivateSubnetACidr:
    Description: CIDR block for the private subnet A
    Type: String
    Default: '10.0.3.0/24'

  PrivateSubnetBCidr:
    Description: CIDR block for the private subnet B
    Type: String
    Default: '10.0.4.0/24'

  AvailabilityZoneA:
    Description: Availability Zone for Subnet A
    Type: 'AWS::EC2::AvailabilityZone::Name'

  AvailabilityZoneB:
    Description: Availability Zone for Subnet B
    Type: 'AWS::EC2::AvailabilityZone::Name'

  EnvironmentName:
    Description: Name of the environment (e.g., staging, production)
    Type: String
    Default: 'staging'

Resources:

  # VPC
  StagingVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: envName
          Value: !Ref EnvironmentName

  # Public Subnet A
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref StagingVPC
      CidrBlock: !Ref PublicSubnetACidr
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Ref AvailabilityZoneA
      Tags:
        - Key: envName
          Value: !Ref EnvironmentName

  # Public Subnet B
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref StagingVPC
      CidrBlock: !Ref PublicSubnetBCidr
      MapPublicIpOnLaunch: 'true'
      AvailabilityZone: !Ref AvailabilityZoneB
      Tags:
        - Key: envName
          Value: !Ref EnvironmentName

  # Private Subnet A
  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref StagingVPC
      CidrBlock: !Ref PrivateSubnetACidr
      AvailabilityZone: !Ref AvailabilityZoneA
      Tags:
        - Key: envName
          Value: !Ref EnvironmentName

  # Private Subnet B
  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref StagingVPC
      CidrBlock: !Ref PrivateSubnetBCidr
      AvailabilityZone: !Ref AvailabilityZoneB
      Tags:
        - Key: envName
          Value: !Ref EnvironmentName

  # Elastic IP
  NatEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Tags:
        - Key: envName
          Value: !Ref EnvironmentName

  # NAT Gateway
  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: envName
          Value: !Ref EnvironmentName

  # Private Route Table A
  PrivateRouteTableA:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref StagingVPC
      Tags:
        - Key: envName
          Value: !Ref EnvironmentName

  # Private Route Table B
  PrivateRouteTableB:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref StagingVPC
      Tags:
        - Key: envName
          Value: !Ref EnvironmentName

  # Route for Private Subnet A
  PrivateRouteA:
    Type: 'AWS::EC2::Route'
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway

  # Route for Private Subnet B
  PrivateRouteB:
    Type: 'AWS::EC2::Route'
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway

  # Associate Private Route Table A with Subnet A
  SubnetRouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTableA
      SubnetId: !Ref PrivateSubnetA

  # Associate Private Route Table B with Subnet B
  SubnetRouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTableB
      SubnetId: !Ref PrivateSubnetB

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: envName
          Value: !Ref EnvironmentName

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref StagingVPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref StagingVPC
      Tags:
        - Key: envName
          Value: !Ref EnvironmentName

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  PublicSubnetBRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB

Outputs:

  VPCId:
    Description: VPC ID
    Value: !Ref StagingVPC

  PublicSubnetAId:
    Description: Public Subnet A ID
    Value: !Ref PublicSubnetA

  PublicSubnetBId:
    Description: Public Subnet B ID
    Value: !Ref PublicSubnetB

  PrivateSubnetAId:
    Description: Private Subnet A ID
    Value: !Ref PrivateSubnetA

  PrivateSubnetBId:
    Description: Private Subnet B ID
    Value: !Ref PrivateSubnetB

  NATGatewayId:
    Description: NAT Gateway ID
    Value: !Ref NatGateway
